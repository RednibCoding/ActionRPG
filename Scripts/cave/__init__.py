"""
- Matrix4X4 should be cave.Matrix4
- Matrix3X3 should be cave.Matrix3
-   same applies for other matrices

- Vector3D should be Vector3

- glm::vec2 should be cave.Vector2
-   same applies for other glm::...

- glm::mat4 should be cave.Matrix4
-   same applies for other matrices

- nullptr should be 'None'

- std::set_tuple_int,int__ should probably Set[tuple[int, int]]
- std::set_int_ should probably Set[int]
-   same applies for other sets

- see:
#######################################
# These need some work probably or to be implemented in python
#######################################

"""

# Python Stub File for the Cave Engine API

# include other libraries
from .math import *
from .event import *
from .network import *
from .random import *

# Basically like forward declarations in c/c++
from __future__ import annotations

# T, List, function pointer, hashmap, Set
from typing import Any, List, Callable, Dict, Set


#######################################
# These need some work probably or to be implemented in python
T = Any
unsignedint = Any
list_str_ = List[str]
list_int_ = List[int]
list_Bone_ = List[Any]
list_Vector3_ = List[cave.Vector3]
list_Vector4_ = List[cave.Vector4]
list_Transform_ = List[cave.Transform]
list_Component_ = List[cave.Component]
list_Entity_ = List[cave.Entity]
list_RayCastOut_ = List[cave.RayCastOut]
list_SphereCastOut_ = List[cave.SphereCastOut]
list_Vertex_ = List[Any]
list_UIElementComponent_ = List[Any]
list_VertexJoints_ = List[Any]
list_unsignedint_ = List[Any]
list_LodData_ = List[Any]
list_CollisionInfo_ = Any
list_SDL_Event_ = Any
AssetHandler_Material_ = Any
AssetHandler_Armature_ = Any
AssetHandler_Animation_ = Any
AssetHandler_Texture_ = Any
AssetHandler_UIStyle_ = Any
AssetHandler_Font_ = Any
AssetHandler_EntityTemplate_ = Any
AssetHandler_ShaderProgram_ = Any
AssetHandler_Mesh_ = Any
ICON_FA_PALETTE = Any
ALWAYS_USE_LAST_LOD_LEVEL = Any
ON_MOVEMENT = Any
inlineint = Any
inlineIntVector2 = Any
Ambient = Any
Mist = Any
Sky = Any
Atmosphere = Any
FontConfig = Any
ShadowSettings = Any
Mirror = Any
UICanvas = Any
EntityMap = Any
ShadowPassRule = Any
PhysicsMesh = Any
ShaderUniforms = Any
Animation = Any
MaterialUBO = Any
ArmatureUBO = Any
Color = Any
CopyInfo = Any
MeshProxyComponent = Any
Optimizations = Any
ParticleInstanceDescriptor = Any
CurveColors = Any
PyCodes = Any
Mouselook = Any
QuadDesc = Any
FontDesc = Any
ShapeDesc = Any
Config = Any
btCollisionObject = Any
PhysicsConstraintType = Any
RigidBodyShape = Any
btRigidBody = Any
Engine = Any
Steering = Any
TuningConfig = Any
Controls = Any
btRaycastVehicle = Any
AlignPlayerRule = Any
CamCollisionConfig = Any
AudioTrack = Any
Debug = Any
#######################################

# Engine Utils:

def getGlobalDict() -> dict: ... # This dictionary is persistent during the entire gameplay

def hasEditor() -> bool: ... # Returns True if cave is in Editor mode, False if it's a standalone game!
def isPlaying() -> bool: ... # Returns True if the game is currently being played in the editor. It's always True on standalone.

def getSystemDataPath(localPath: str) -> str: ... # Returns the localPath inside AppData, HOME, etc... ideal for save directory!
def getGamePath(localPath: str) -> str: ... # Returns the Game's current path + the localPath

def getDeltaTime() -> float: ...
def getFPS() -> float: ...

def showMouse(show: bool) -> None: ...
def getMousePosition(normalize: bool= False) -> Vector2: ...
def getMousePositionUI() -> Vector2: ... # This one takes the Editor UI into account and is always like the UI Elements!
def setMousePosition(x: int, y: int) -> None: ...

def getWindowSize() -> Vector2: ...

def quitGame() -> None: ...

def setScene(name: str) -> bool: ...
def getScene() -> Scene: ...
def getCurrentScene() -> Scene: ...
def restartCurrentScene() -> None: ...

def getEvents() -> Events: ...
def getWindow() -> Window: ...

def getScriptSource(scriptName: str) -> str: ...

def getEntityTemplate(name: str, markAsDirty: bool= False) -> EntityTemplate: ...
def getMesh(name: str, markAsDirty: bool= False) -> Mesh: ...

def playSound(name: str, volume: float = 1.0, loop: int = 0, startPaused: bool = False) -> AudioTrackInstance: ...

def makeImage(filePath: str, pixels: list[int], width: int, height: int) -> bool: ...

class AssetHandler_T_(cave.IAssetHandler):
	def __init__(self, name: str = ""): ...
	def makeWeakRef(asset: T) -> None: ...
	def makeLocalCopy() -> None: ...
	def makeLocalNew() -> None: ...

	def get(markAsDirty: bool = True) -> T: ...

# Class reference:

class IAssetHandler():
	name : str

	def setAsset(self, asset : Asset) -> None: ...
	def setAsset(self, name : str, searchChildren : bool = True) -> None: ...
	def getAssetUID(self) -> int: ...
	def getAsset(self, markAsDirty : bool = True, searchChildren : bool = False) -> Asset: ...
	def isLocal(self) -> bool: ...
	def isWeakRef(self) -> bool: ...
	def isFromAssetData(self) -> bool: ...
	def saveToAssetData(self, filePath : str = "") -> bool: ...

class AudioTrackInstance():
	def __init__(self, handler : int = 0): ...
	def __init__(self, other : AudioTrackInstance): ...

	def play(self, loop : int) -> None: ...
	def pause(self) -> None: ...
	def resume(self) -> None: ...
	def stop(self, fadeOut : float = 0.0) -> None: ...
	def getProgress(self) -> float: ...
	def setProgress(self, value : float) -> None: ...
	def getDuration(self) -> float: ...
	def setLoop(self, loop : int) -> None: ...
	def setSource3D(self, source : Entity, maxDistance : float = 100.0) -> None: ...
	def calculate3D(self, audioPos : Vector3, maxDistance : float = 100.0) -> bool: ...
	def isActive(self) -> bool: ...
	def isPlaying(self) -> bool: ...
	def isPaused(self) -> bool: ...
	def isValid(self) -> bool: ...
	def setVolume(self, value : float) -> None: ...
	def getVolume(self) -> float: ...
	def getPitch(self) -> float: ...
	def setPitch(self, pitch : float) -> None: ...
	def setPan(self, pan : float) -> None: ...
	def getTrack(self) -> AudioTrack: ... # TODO: should this be AudioTrackInstance ??

class Events():
	def update(self) -> None: ...
	def forceQuit(self) -> None: ...
	def refuseQuitStatus(self) -> None: ...
	def getQuitStatus(self) -> bool: ...
	def hasResized(self) -> bool: ...
	def getJoystickCount(self) -> int: ...
	def getJoystickName(self, id : int) -> str: ...
	def getJoystick(self, id : int) -> cave.Events.Joystick: ...
	def getMouseScroll(self) -> float: ...
	def pressed(self, t : event.Type) -> bool: ...
	def active(self, t : event.Type) -> bool: ...
	def released(self, t : event.Type) -> bool: ...
	def pressed(self, t : str) -> bool: ...
	def active(self, t : str) -> bool: ...
	def released(self, t : str) -> bool: ...
	def getMouseMotion(self) -> Vector2: ...
	def setRelativeMouse(self, value : bool) -> None: ...
	def popDroppedFiles(self) -> list_str_: ...
	def getKeyStatus(self, t : event.Type) -> event.Status: ...
	def getSDLEventPool(self) -> list_SDL_Event_: ...

class Events_Joystick():
	def isValid(self) -> bool: ...
	def getName(self) -> str: ...
	def getType(self) -> str: ...
	def getIndex(self) -> int: ...
	def getInstanceID(self) -> int: ...
	def hasVibration(self) -> bool: ...
	def hasLED(self) -> bool: ...
	def hasAccelerometer(self) -> bool: ...
	def hasGyroscope(self) -> bool: ...
	def setAccelerometerEnabled(self, value : bool) -> None: ...
	def setGyroscopeEnabled(self, value : bool) -> None: ...
	def getAccelerometer(self) -> Vector3: ...
	def getGyroscope(self) -> Vector3: ...
	def isGameController(self) -> bool: ...
	def hasAxis(self, axis : event.Controller) -> bool: ...
	def hasButton(self, axis : event.Controller) -> bool: ...
	def getAxisLeft(self, tolerance : float = 0.1) -> Vector2: ...
	def getAxisRight(self, tolerance : float = 0.1) -> Vector2: ...
	def getTriggerLeft(self) -> float: ...
	def getTriggerRight(self) -> float: ...
	def getControllerButton(self, btn : event.Controller) -> bool: ...
	def getNumTouchpads(self) -> int: ...
	def getNumTouchpadFingers(self, touchpad : int) -> int: ...
	def getTouchpadFinger(self, touchpad : int, finger : int) -> Vector3: ...
	def pressed(self, btn : event.Controller) -> bool: ...
	def active(self, btn : event.Controller) -> bool: ...
	def released(self, btn : event.Controller) -> bool: ...
	def buttonPressed(self, btn : int) -> bool: ...
	def buttonActive(self, btn : int) -> bool: ...
	def buttonReleased(self, btn : int) -> bool: ...
	def setLED(self, r : float, g : float, b : float) -> None: ...
	def vibrate(self, left : float = 1.0, right : float = 1.0, duration : float = 0.5) -> None: ...
	def getPowerLevel(self) -> str: ...
	def getNumAxes(self) -> int: ...
	def getNumBalls(self) -> int: ...
	def getNumButtons(self) -> int: ...
	def getNumHats(self) -> int: ...
	def getAxis(self, axis : int, tolerance : float = 0.1) -> float: ...
	def getAxisInitialState(self, axis : int) -> float: ...
	def getBall(self, ball : int) -> IntVector2: ...
	def getButton(self, button : int) -> bool: ...
	def getHat(self, hat : int) -> IntVector2: ...

class Vertex():
	position : Vector3
	normal : Vector3
	tangent : Vector3
	uv : Vector2

	def __init__(self): ...

class VertexJoints():
	weights : Vector4
	jointIDs : Vector4

	def __init__(self): ...

class VertexInfo():
	data : Vertex
	joints : VertexJoints

class Mesh_MeshDistanceCulling():
	enable : bool = False
	enableDither : bool = True
	distance : float = 100.0

class Mesh_MeshHints():
	transform : Transform
	material : AssetHandler_Material_
	armature : AssetHandler_Armature_
	animation : AssetHandler_Animation_

class Sampler2D():
	texture : AssetHandler_Texture_
	color : Vector4

	def __init__(self): ...
	def __init__(self, _texture : Texture): ...
	def __init__(self, textureName : str): ...
	def __init__(self, r : float, g : float, b : float, a : float = 1.0): ...
	def __init__(self, r : float, g : float, b : float, a : float, assetID : int): ...
	def __init__(self, r : float, g : float, b : float, a : float, assetID : int, textureName : str): ...
	def __init__(self, r : float, g : float, b : float, a : float, textureName : str): ...
	def __init__(self, other : Sampler2D): ...

	def asString(self) -> str: ...
	def setTexture(self, tex : str) -> None: ...
	def getTexture(self, stagingLocation : int, markAsDirty : bool = True) -> Texture: ...
	def use(self, shader : ShaderProgram, uniform : str, location : int) -> None: ...
	def drawTextureOnlyUI(self, samplerName : str, icon : str = ICON_FA_PALETTE) -> None: ...
	def set(self, r : float, g : float, b : float, a : float = 1.0) -> None: ...
	def set(self, value : float) -> None: ...

class RenderGraph_Config():
	applyShading : bool
	ambient : Ambient
	mist : Mist
	sky : Sky
	atmosphere : Atmosphere
	background : Vector3
	ambientCol : Vector3
	ambientIntensity : float

class RenderGraph_Config_Ambient():
	use : bool
	factor : float
	color : ColorSampler

class RenderGraph_Config_Mist():
	use : bool
	start : float
	distance : float
	falloff : float
	color : ColorSampler

class RenderGraph_Config_Sky():
	blur : float
	intensity : float
	angle : float
	color : ColorSampler

class RenderGraph_Config_Atmosphere():
	planetRadius : float
	atmHeight : float
	sunIntensity : float

class UIRect():
	left : float
	right : float
	top : float
	bottom : float

	def __init__(self): ...
	def __init__(self, l : float, r : float, t : float, b : float): ...

	def isPointInside(self, point : Vector2) -> bool: ...
	def snapToGrid(self, gridSize : float = 0.05) -> None: ...
	def getWidth(self) -> float: ...
	def getHeight(self) -> float: ...
	def getScale(self) -> Vector2: ...
	def getCenter(self) -> Vector2: ...

class UIVector():
	relativeX : bool
	relativeY : bool
	anchoring : IntVector2

	def __init__(self): ...
	def __init__(self, other : UIVector): ...
	def __init__(self, x : float, y : float): ...

	def drawDebugUI(self, internalName : str, isScalingVec : bool = False) -> None: ...
	def get(self, parentScale : Vector2 = cave.Vector2(1.0, 1.0)) -> cave.Vector2: ...
	def getX(self, parentScale : float = 1.0) -> float: ...
	def getY(self, parentScale : float = 1.0) -> float: ...
	def set(self, value : Vector2, parentScale : Vector2 = cave.Vector2(1.0,1.0)) -> None: ...
	def setPixelX(self, x : int) -> None: ...
	def setPixelY(self, y : int) -> None: ...
	def setRelativeX(self, x : float) -> None: ...
	def setRelativeY(self, y : float) -> None: ...
	def setPixel(self, x : int, y : int) -> None: ...
	def setRelative(self, x : float, y : float) -> None: ...
	def getAnchoringX(self) -> int: ...
	def setAnchoringX(self, value : int) -> None: ...
	def getAnchoringY(self) -> int: ...
	def setAnchoringY(self, value : int) -> None: ...
	def isRelativeX(self) -> bool: ...
	def isRelativeY(self) -> bool: ...
	def asString(self) -> str: ...

class UIStyle_Color():
	image : AssetHandler_Texture_
	tint : Vector3
	alpha : float = 1.0
	blurBackground : float = 0.0

	def __init__(self): ...

class SourceCode():
	source : str

class AnimationFilter():
	defaultBlend : float
	blend : dict_str, float_ // do you mean Dict[str, float] ?

	def __init__(self, _defaultBlend : float = 0.0): ...
	def __init__(self, other : AnimationFilter): ...

	def setToBone(self, bone : Bone, value : float, recursive : bool = False) -> None: ...
	def getBlend(self, boneName : str) -> float: ...

class AnimationComponent_AnimationLayer():
	anim : AssetHandler_Animation_
	frameCallbacks : list_int_
	loop : bool = False
	priority : int = 0
	loops : int = 0
	frame : float = 0.0
	speed : float = 30.0
	start : float = 0.0
	end : float = 100.0
	blendTimer : float
	blendDuration : float
	rootMotion : Vector3
	rootMotionLastPos : Vector3
	rootMotionLastLoopCount : int = 0
	rootMotionSkip : bool = True

	def getName(self) -> str: ...
	def getProgress(self) -> float: ...

class AnimationSocketComponent_CopyInfo():
	copy : bool = True
	offset : Vector3

class ParticleComponent_ParticleInstanceDescriptor():
	count : int
	spawnArea : Vector3
	scaleMin : Vector3
	scaleMax : Vector3
	rotationMin : Vector3
	rotationMax : Vector3
	isDynamic : bool
	useParent : bool
	life : float
	respawn : float
	gravity : Vector3
	linearVelocity : Vector3
	linearConservation : Vector3
	angularVelocity : Vector3
	angularConservation : Vector3

class ThirdPersonCamComponent_Mouselook():
	sensitivity : Vector2 = cave.Vector2(-0.2, 0.2)
	threshold : Vector2 = cave.Vector2(0.0, 0.0)
	pitchLimit : Vector2

class ThirdPersonCamComponent_CamCollisionConfig():
	use : bool = True
	radius : float = 0.3
	mask : BitMask

class MouselookAxisConfig():
	use : bool = True
	rotationLocal : bool = False
	rotationAxis : int = 0
	rangeMin : float = 0.0
	rangeMax : float = 0.0
	sensitivity : float = -0.2
	threshold : float = 0.0
	m_allowRotationAdjust : bool = True

class UIElementComponent_QuadDesc():
	style : UIStyle
	styleOverride : AssetHandler_UIStyle_
	hoverable : bool = False
	clickable : bool = False

class UIElementComponent_FontConfig():
	scale : float = 1.0
	spacing : float = 0.0
	hScale : float = 1.0
	lineHeight : float = 1.0
	textAlign : int = 0
	textAnchor : int = 0

class UIElementComponent_FontDesc():
	source : AssetHandler_Font_
	config : FontConfig
	text : str

class VehicleComponent_Engine():
	acceleration : float = 500.0
	reverse : float = 100.0
	brake : float = 400.0

class VehicleComponent_Steering():
	clamp : float = 25.0
	increment : float = 3.0

class WheelComponent_TuningConfig():
	suspensionStiffness : float = 6.0
	suspensionCompression : float = 1.0
	suspensionDamping : float = 1.0
	suspensionTravelCmMax : float = 500.0
	suspensionForceMax : float = 6000.0
	frictionSlip : float = 10.0

class WheelComponent_Controls():
	hasTraction : bool = True
	hasBrake : bool = True

class BitMask():
	def __init__(self, enableFirstEight : bool = True): ...
	def __init__(self, other : BitMask): ...

	def intersect(self, other : BitMask) -> bool: ...
	def isEnabled(self, n : int) -> bool: ...
	def get(self, n : int) -> bool: ...
	def set(self, n : int, value : bool) -> None: ...
	def enable(self, n : int) -> None: ...
	def disable(self, n : int) -> None: ...
	def enableAll(self) -> None: ...
	def disableAll(self) -> None: ...
	def getUInt(self) -> unsignedint: ...
	def getFloat(self) -> float: ...

class Transform():
	def __init__(self): ...
	def __init__(self, other : Transform): ...

	def set(self, other : Transform) -> None: ...
	def getWorldMatrix(self) -> Matrix4X4: ...
	def getInverseWorldMatrix(self) -> Matrix4X4: ...
	def getWorldRotator(self) -> Matrix3X3: ...
	def setWorldMatrix(self, matrix : Matrix4X4) -> None: ...
	def applyTransform(self, other : Transform) -> None: ...
	def getWorldPosition(self) -> Vector3D: ...
	def getPosition(self) -> Vector3D: ...
	def setPosition(self, x : float, y : float, z : float) -> None: ...
	def setPosition(self, position : Vector3D) -> None: ...
	def applyMovement(self, x : float, y : float, z : float) -> None: ...
	def applyMovement(self, position : Vector3D) -> None: ...
	def applyLocalMovement(self, x : float, y : float, z : float) -> None: ...
	def applyLocalMovement(self, movement : Vector3D) -> None: ...
	def lookAt(self, direction : Vector3D, up : Vector3D = Vector3D(0.0, 1.0, 0.0)) -> None: ...
	def lookAtSmooth(self, direction : Vector3D, lerp : float = 0.5, up : Vector3D = Vector3D(0.0, 1.0, 0.0)) -> None: ...
	def lerp(self, target : Transform, lerp : float = 0.5) -> None: ...
	def sLerpQuaternion(self, target : Quaternion, lerp : float = 0.5) -> None: ...
	def getQuaternion(self) -> Quaternion: ...
	def setQuaternion(self, x : float, y : float, z : float, w : float) -> None: ...
	def setQuaternion(self, quaternion : Quaternion) -> None: ...
	def getEuler(self) -> Vector3D: ...
	def setEuler(self, x : float, y : float, z : float) -> None: ...
	def setEuler(self, euler : Vector3D) -> None: ...
	def getRotator(self) -> Matrix3X3: ...
	def setRotator(self, rotator : Matrix3X3) -> None: ...
	def rotateVector(self, vec : Vector3D) -> Vector3D: ...
	def unrotateVector(self, vec : Vector3D) -> Vector3D: ...
	def transformVector(self, vec : Vector3D) -> Vector3D: ...
	def untransformVector(self, vec : Vector3D) -> Vector3D: ...
	def transformDirection(self, dir : Vector3D) -> Vector3D: ...
	def untransformDirection(self, dir : Vector3D) -> Vector3D: ...
	def getScale(self) -> Vector3D: ...
	def getWorldScale(self) -> Vector3D: ...
	def setScale(self, scalar : float) -> None: ...
	def setScale(self, x : float, y : float, z : float) -> None: ...
	def setScale(self, scale : Vector3D) -> None: ...
	def getMatrix(self) -> Matrix4X4: ...
	def getInverseMatrix(self) -> Matrix4X4: ...
	def setMatrix(self, matrix : Matrix4X4) -> None: ...
	def getPitch(self) -> float: ...
	def getYaw(self) -> float: ...
	def getRoll(self) -> float: ...
	def getForwardVector(self, world : bool = False) -> Vector3D: ...
	def getRightVector(self, world : bool = False) -> Vector3D: ...
	def getUpVector(self, world : bool = False) -> Vector3D: ...
	def move(self, x : float, y : float, z : float, local : bool = True) -> None: ...
	def rotate(self, x : float, y : float, z : float) -> None: ...
	def rotateEuler(self, x : float, y : float, z : float) -> None: ...
	def rotateOnAxis(self, angle : float, axis : Vector3D) -> None: ...
	def rotateOnPitch(self, angle : float) -> None: ...
	def rotateOnYaw(self, angle : float) -> None: ...
	def rotateOnRoll(self, angle : float) -> None: ...

class Camera(Transform):
	renderMask : BitMask
	useCustomTransform : bool = True

	def __init__(self): ...

	def getMatrix(self) -> glm::mat4: ...
	def getViewProjection(self) -> glm::mat4: ...
	def getProjection(self) -> glm::mat4: ...
	def getProjection(self, customAspect : float) -> glm::mat4: ...
	def getProjectionType(self) -> Camera.CameraType: ...
	def getScreenRay(self, x : float, y : float) -> Vector3: ...
	def getScreenPos(self, worldPos : Vector3) -> Vector2: ...
	def setPerspective(self, fieldOfView : float) -> None: ...
	def setOrthographic(self, orthoArea : float) -> None: ...
	def getPerspectiveFov(self) -> float: ...
	def getOrphographicArea(self) -> float: ...
	def setDistances(self, start : float, end : float) -> None: ...
	def getAperture(self) -> float: ...
	def setAperture(self, value : float) -> None: ...
	def getNearPlane(self) -> float: ...
	def setNearPlane(self, value : float) -> None: ...
	def getFarPlane(self) -> float: ...
	def setFarPlane(self, value : float) -> None: ...
	def isPerspective(self) -> bool: ...
	def isOrthographic(self) -> bool: ...

class RenderableSun(Camera):
	color : Vector3
	intensity : float
	shadow : ShadowSettings

	def __init__(self): ...

	def getProjection(self) -> glm::mat4: ...
	def getDirection(self) -> Vector3: ...
	def getColor(self) -> Vector3: ...
	def getHour(self) -> float: ...
	def setHour(self, value : float) -> None: ...
	def getAngle(self) -> float: ...
	def setAngle(self, value : float) -> None: ...
	def alignTransformToView(self, cam : Camera) -> None: ...

class NodeTransform(Transform):
	def __init__(self): ...
	def __init__(self, other : NodeTransform): ...

	def getWorldMatrix(self) -> Matrix4X4: ...
	def getInverseWorldMatrix(self) -> Matrix4X4: ...
	def getWorldRotator(self) -> Matrix3X3: ...
	def setWorldMatrix(self, matrix : Matrix4X4) -> None: ...
	def getWorldPosition(self) -> Vector3D: ...
	def setWorldPosition(self, pos : Vector3D) -> None: ...
	def setWorldPosition(self, x : float, y : float, z : float) -> None: ...
	def getWorldEuler(self) -> Vector3D: ...
	def getWorldQuaternion(self) -> Quaternion: ...
	def lookAt(self, direction : Vector3D, up : Vector3D = Vector3D(0.0, 1.0, 0.0)) -> None: ...
	def lookAtSmooth(self, direction : Vector3D, lerp : float = 0.5, up : Vector3D = Vector3D(0.0, 1.0, 0.0)) -> None: ...
	def setParent(self, parent : NodeTransform, keepTransform : bool = False) -> None: ...
	def removeParent(self) -> None: ...
	def getParent(self) -> NodeTransform: ...
	def addChildren(self, children : NodeTransform) -> None: ...
	def removeChildren(self, children : NodeTransform) -> None: ...

class Bone(NodeTransform):
	name : str

	def getAnimatedMatrix(self) -> glm::mat4: ...
	def setOffset(self, offset : glm::mat4) -> None: ...
	def applyOffset(self) -> None: ...
	def getOffset(self) -> glm::mat4: ...
	def getIndex(self) -> int: ...
	def setIndex(self, index : int) -> None: ...
	def getChildren(self) -> list_Bone_: ...

class IObject():
	pass

class Asset(Mirror.IObject):
	name : str
	debug : Debug

	def getUID(self) -> int: ...
	def getUniqueName(self) -> str: ...
	def getAssetFileName(self) -> str: ...
	def getAssetTypeName(self) -> str: ...
	def getThumbnail(self, generateIfNone : bool = True, forceRegenation : bool = False) -> Texture: ...

class Component(Asset):
	def __init__(self): ...
	def __init__(self, other : Component): ...

	def getCustomName(self) -> str: ...
	def start(self, scene : Scene) -> None: ...
	def firstUpdate(self) -> None: ...
	def update(self) -> None: ...
	def pausedUpdate(self) -> None: ...
	def editorUpdate(self) -> None: ...
	def lateUpdate(self) -> None: ...
	def end(self, scene : Scene) -> None: ...
	def reload(self) -> None: ...
	def getEntity(self) -> Entity: ...
	def setEntity(self, e : Entity) -> None: ...

class Entity(Asset):
	templateEntity : AssetHandler_EntityTemplate_
	tags : dict_str,bool_ // Do you mean Dict[str, bool] ?
	properties : dict

	def __init__(self, name : str = "Entity"): ...
	def __init__(self, other : Entity): ...

	def getBoundingBox(self, recursive : bool = True) -> Transform: ...
	def isActive(self) -> bool: ...
	def getActive(self) -> bool: ...
	def setActive(self, value : bool, scene : Scene) -> None: ...
	def activate(self, scene : Scene) -> None: ...
	def deactivate(self, scene : Scene) -> None: ...
	def isTemplated(self, parentRecursive : bool = False) -> bool: ...
	def getRootTemplate(self) -> Entity: ...
	def reloadTemplate(self, scene : Scene = None) -> None: ...
	def setParent(self, parent : Entity) -> bool: ...
	def removeParent(self) -> None: ...
	def setParentLocal(self, parent : Entity) -> bool: ...
	def removeParentLocal(self) -> None: ...
	def getRootParent(self) -> Entity: ...
	def getParentLevel(self) -> int: ...
	def canBeAChildOf(self, ent : Entity) -> bool: ...
	def getParent(self) -> Entity: ...
	def getChild(self, name : str, recursive : bool = True) -> Entity: ...
	def getChildren(self) -> list_Entity_: ...
	def getChildrenRecursive(self) -> list_Entity_: ...
	def start(self, scene : Scene) -> None: ...
	def firstUpdate(self) -> None: ...
	def end(self, scene : Scene) -> None: ...
	def getTransform(self) -> TransformComponent: ...
	def getScene(self) -> Scene: ...
	def submitTransformToWorld(self) -> None: ...
	def add(self, c : Component) -> Component: ...
	def add(self, cmpName : str) -> Component: ...
	def get(self, literalName : str) -> Component: ...
	def get(self, id : int) -> Component: ...
	def getPy(self, literalName : str) -> Component: ...
	def getAll(self, literalName : str) -> list_Component_: ...
	def remove(self, cmp : Component) -> None: ...
	def remove(self, literalName : str) -> None: ...
	def removeAll(self, literalName : str) -> None: ...
	def scheduleKill(self, timeInSeconds : float) -> None: ...
	def isKillScheduled(self) -> bool: ...
	def kill(self) -> None: ...
	def reset(self, deleteChildrens : bool = True) -> None: ...
	def reload(self, recursive : bool = True) -> None: ...
	def getComponents(self) -> list_Component_: ...
	def hasTag(self, tag : str) -> bool: ...
	def addTag(self, tag : str) -> None: ...
	def removeTag(self, tag : str) -> None: ...
	def getTags(self) -> list_str_: ...
	def hasProperty(self, prop : str) -> bool: ...
	def isAlive(self) -> bool: ...
	def setEntityUID(self, value : int) -> None: ...
	def getIcon(self) -> str: ...
	def getInternalName(self) -> str: ...
	def getProperties(self) -> dict: ...

class EntityTemplate(Asset):
	def getBase(self) -> Entity: ...
	def setBase(self, entity : Entity) -> None: ...

class Scene(Asset):
	uiCanvas : UICanvas
	properties : dict
	paused : bool
	allowPlay : bool = True

	def __init__(self, name : str = "Scene"): ...

	def isCurrentScene(self) -> bool: ...
	def addDefaultObjects(self) -> None: ...
	def renderToTexture(self, cam : Camera = None, resolution : IntVector2 = glm::ivec2(0,0)) -> Texture: ...
	def newEntity(self) -> Entity: ...
	def copyEntity(self, e : Entity) -> Entity: ...
	def add(self, e : Entity) -> Entity: ...
	def remove(self, e : Entity) -> None: ...
	def reloadTemplate(self, templateID : int) -> None: ...
	def get(self, id : int) -> Entity: ...
	def get(self, name : str) -> Entity: ...
	def addFromTemplate(self, templateName : str, position : Vector3 = glm::vec3(0.f), rotation : Vector3 = glm::vec3(0.f), scale : Vector3 = glm::vec3(1.f)) -> Entity: ...
	def rayCast(self, fromVec : Vector3, to : Vector3, mask : BitMask = BitMask()) -> RayCastOut: ...
	def rayCastAll(self, fromVec : Vector3, to : Vector3, mask : BitMask = BitMask()) -> list_RayCastOut_: ...
	def sphereCast(self, fromVec : Vector3, to : Vector3, radius : float, mask : BitMask = BitMask()) -> SphereCastOut: ...
	def sphereCastAll(self, fromVec : Vector3, to : Vector3, radius : float, mask : BitMask = BitMask()) -> list_SphereCastOut_: ...
	def checkContactBox(self, box : Transform, mask : BitMask = BitMask()) -> list_CollisionInfo_: ...
	def checkContactBox(self, pos : Vector3, rot : Quaternion, scale : Vector3, mask : BitMask = BitMask()) -> list_CollisionInfo_: ...
	def checkContactSphere(self, pos : Vector3, radius : float, mask : BitMask = BitMask()) -> list_CollisionInfo_: ...
	def addDebugLine(self, fromVec : Vector3, to : Vector3, color : Vector3) -> None: ...
	def addDebugArrow(self, fromVec : Vector3, to : Vector3, color : Vector3) -> None: ...
	def addDebugPoint(self, position : Vector3, color : Vector3) -> None: ...
	def addDebugCube(self, transform : Transform, color : Vector3) -> None: ...
	def addDebugCircle(self, transform : Transform, color : Vector3, numVertices : int = 8) -> None: ...
	def addDebugCircle(self, position : Vector3, radius : float, color : Vector3, numVertices : int = 8) -> None: ...
	def addDebugSphere(self, position : Vector3, radius : float, color : Vector3, numVertices : int = 8) -> None: ...
	def getCamera(self) -> Camera: ...
	def getSunLight(self) -> RenderableSun: ...
	def getSunLightPtr(self) -> RenderableSun: ...
	def getBoundingBox(self) -> Transform: ...
	def getBoundingBoxPhysics(self) -> Transform: ...
	def getRenderGraphConfig(self) -> RenderGraph_Config: ...
	def getPostProcessingOverride(self) -> str: ...
	def setPostProcessingOverride(self, postProcessing : str) -> None: ...
	def resetElapsedSceneTime(self) -> None: ...
	def incrementElapsedSceneTime(self) -> None: ...
	def getElapsedSceneTime(self) -> float: ...
	def playTimeline(self, name : str, loop : bool = False, playWhenPaused : bool = False, restoreCameraOnEnd : bool = True) -> None: ...
	def isTimelineBeingPlayed(self, name : str) -> bool: ...
	def isAnyTimelineBeingPlayed(self) -> bool: ...
	def getNumTimelinesBeingPlayed(self) -> int: ...
	def stopTimeline(self, name : str) -> None: ...
	def stopAllTimelines(self) -> None: ...
	def getTimelineProgress(self, name : str) -> float: ...
	def getTimelineFrame(self, name : str) -> float: ...
	def getTimelineLoops(self, name : str) -> int: ...
	def getEntities(self) -> list_Entity_: ...
	def getEntitiesWithTag(self, tag : str) -> list_Entity_: ...
	def getEntitiesWithName(self, name : str) -> list_Entity_: ...
	def getEntitiesWithProperty(self, prop : str) -> list_Entity_: ...
	def getRootEntities(self) -> list_Entity_: ...
	def getRootEntitiesWithTag(self, tag : str) -> list_Entity_: ...
	def getRootEntitiesWithProperty(self, prop : str) -> list_Entity_: ...
	def getEntitiesFromTemplate(self, templateName : str) -> list_Entity_: ...
	def getEntitiesWithComponent(self, componentName : str, searchPythonComponents : bool = False) -> list_Entity_: ...
	def getEntitiesHandler(self) -> EntityMap: ...
	def getActiveEntity(self) -> Entity: ...
	def generateDebugThumbnail(self, force : bool = False) -> None: ...
	def getProperties(self) -> dict: ...

class Mesh(Asset):
	vertices : list_Vertex_
	joints : list_VertexJoints_
	indices : list_unsignedint_
	lod0range : float = 30.0
	lod : list_LodData_
	distanceCulling : Mesh_MeshDistanceCulling
	shadowPassRule : ShadowPassRule = ALWAYS_USE_LAST_LOD_LEVEL
	hints : Mesh_MeshHints

	def __init__(self): ...
	def __init__(self, other : Mesh): ...

	def getPhysicsMesh(self, createIfNone : bool = True) -> PhysicsMesh: ...
	def rebuildPhysicsMesh(self) -> None: ...
	def bindMeshBuffersData(self) -> None: ...
	def reset(self, resetData : bool = True) -> None: ...
	def reload(self) -> None: ...
	def recalculateTangents(self, useUVs : bool = False) -> None: ...
	def recalculateNormals(self) -> None: ...
	def flipNormals(self) -> None: ...
	def applyShadeFlat(self) -> None: ...
	def flipIndices(self) -> None: ...
	def recalculateIndices(self) -> None: ...
	def mergeByDistance(self, distance : float = 0.001, ignoreUVs : bool = False, ignoreNormals : bool = False, reload : bool = True) -> None: ...
	def mergeByDistanceFast(self, decimals : int = 4, reload : bool = True) -> None: ...
	def mergeJointsByDistance(self, distance : float = 0.001, reload : bool = True) -> None: ...
	def removeLooseVertices(self, reload : bool = True) -> None: ...
	def optimizeMesh(self, reload : bool = True) -> None: ...
	def uIDoubleClicked(self) -> None: ...
	def use(self) -> int: ...
	def useLod(self, lodLevel : int = 0) -> int: ...
	def getLodLevelForDistance(self, distance : float) -> int: ...
	def draw(self) -> None: ...
	def drawInstanced(self, instanceCount : int) -> None: ...
	def drawLines(self, width : float = 1.f) -> None: ...
	def drawPoints(self, thickness : float = 5.f) -> None: ...
	def getCopy(self) -> Mesh: ...
	def getRandomPoint(self) -> Vertex: ...
	def getBoundingBox(self, keepAspect : bool = True, transf : Transform = None) -> Transform: ...
	def getCachedBoundingBox(self) -> glm::mat4: ...
	def recalculateCachedBoundingBox(self) -> None: ...
	def removeAnimationJointsIfUnused(self, reload : bool = True) -> None: ...
	def hasAnimationData(self) -> bool: ...
	def appendVertex(self, pos : Vector3, normal : Vector3, tangent : Vector3, uv : Vector2) -> None: ...
	def addLine(self, fromVec : Vector3, to : Vector3, color : Vector3) -> None: ...
	def mergeVertices(self, targetIdx : int, otherIdx : int) -> bool: ...
	def getEdges(self, vertexIdx : int) -> std::set_int_: ...
	def getFaces(self, vertexIdx : int) -> std::set_int_: ...
	def getAllEdges(self) -> std::set_tuple_int,int__: ...
	def getAverageNormalLength(self, vertexIdx : int) -> float: ...
	def decimate(self, ratio : float = 0.5, reload : bool = True) -> None: ...
	def generateLodLevels(self, lodLevels : int = 1, distanceFactor : float = 3.0, reload : bool = True) -> None: ...
	def addFace(self, vList : list_Vertex_) -> None: ...
	def addMesh(self, other : Mesh) -> None: ...
	def addMeshTransformed(self, other : Mesh, transform : Transform) -> None: ...
	def addVolume(self, transform : Transform) -> None: ...
	def addNgon(self, ngon : list_Vector3_) -> None: ...
	def addNgon(self, ngon : list_Vertex_) -> None: ...
	def applyTransform(self, transform : Transform, bindData : bool = True) -> None: ...
	def applyMovement(self, move : Vector3, bindData : bool = True) -> None: ...
	def getCurrentIndicesCount(self) -> int: ...
	def getObj(self, indicesOffset : unsignedint = 0) -> str: ...
	def buildMeshWithLod(self, lodLevel : int, bindData : bool = True) -> Mesh: ...
	def disableShadowRendering(self) -> None: ...
	def enableShadowRendering(self, useLastLod : bool = False) -> None: ...
	def generateDebugThumbnail(self, force : bool = False) -> None: ...

class ShaderProgram(Asset):
	uniforms : ShaderUniforms
	vertex : SourceCode
	geometry : SourceCode
	fragment : SourceCode

	def __init__(self): ...
	def __init__(self, vert : str, frag : str, startupShaders : bool = True): ...
	def __init__(self, vert : str, geom : str, frag : str, startupShaders : bool = True): ...
	def __init__(self, other : ShaderProgram): ...

	def isValid(self) -> bool: ...
	def reload(self) -> None: ...
	def use(self, permutation : int = 0) -> None: ...
	def set(self, name : str, value : int) -> None: ...
	def set(self, name : str, value : unsignedint) -> None: ...
	def set(self, name : str, value : bool) -> None: ...
	def set(self, name : str, value : float) -> None: ...
	def set(self, name : str, value : Vector2) -> None: ...
	def set(self, name : str, value : IntVector2) -> None: ...
	def set(self, name : str, value : Vector3) -> None: ...
	def set(self, name : str, value : IntVector3) -> None: ...
	def set(self, name : str, value : Vector4) -> None: ...
	def set(self, name : str, value : glm::ivec4) -> None: ...
	def set(self, name : str, value : glm::mat3) -> None: ...
	def set(self, name : str, value : glm::mat4) -> None: ...
	def setUniformBuffer(self, name : str, bindingPoint : unsignedint) -> None: ...

class Texture(Asset):
	def saveTexture(self, filePath : str) -> None: ...
	def getTextureID(self) -> unsignedint: ...
	def getHeight(self) -> inlineint: ...
	def getWidth(self) -> inlineint: ...
	def getResolution(self) -> inlineIntVector2: ...
	def getAspect(self) -> float: ...

class Armature(Asset):
	def __init__(self): ...

	def uIDoubleClicked(self) -> None: ...
	def getBoundingBox(self, keepAspect : bool = True, transf : Transform = None) -> Transform: ...
	def drawDebugLines(self, transform : Transform, scene : Scene, showParenting : bool = False) -> None: ...
	def generateDebugThumbnail(self, force : bool = False) -> None: ...
	def update(self, animation : Animation, frame : float, blend : float = 1.0, filter : AnimationFilter = None) -> None: ...
	def addBone(self, boneName : str, bone : Bone) -> None: ...
	def getBone(self, boneName : str, addIfNone : bool = False) -> Bone: ...
	def getBones(self) -> list_Bone_: ...
	def getBoneNames(self) -> list_str_: ...
	def setBoneParent(self, child : str, parent : str) -> None: ...

class ColorSampler(Mirror.IObject):
	def __init__(self): ...
	def __init__(self, uniformName : str, uniformID : int): ...
	def __init__(self, other : ColorSampler): ...

	def init(self, uniformName : str, uniformID : int) -> None: ...
	def use(self, shader : ShaderProgram) -> None: ...
	def hasTexture(self) -> bool: ...
	def getTextureName(self) -> str: ...
	def getTexture(self, markAsDirty : bool = True) -> Texture: ...
	def getColor(self) -> Vector4: ...
	def set(self, value : float) -> None: ...
	def set(self, rgb : Vector3, a : float = 1.f) -> None: ...
	def set(self, rgba : Vector4) -> None: ...
	def set(self, r : float, g : float, b : float, a : float = 1.0) -> None: ...
	def set(self, texture : str) -> None: ...
	def set(self, texture : Texture) -> None: ...

class Material(Asset):
	mask : BitMask
	settings : MaterialUBO
	backfaceCulling : bool
	shaderOverride : AssetHandler_ShaderProgram_
	uniforms : ShaderUniforms

	def __init__(self, name : str = "BasicMaterial"): ...
	def __init__(self, other : Material): ...

	def uIDoubleClicked(self) -> None: ...
	def use(self, _shader : ShaderProgram, shadowPass : bool = False) -> None: ...
	def getShaderPermutations(self) -> int: ...
	def generateDebugThumbnail(self, force : bool = False) -> None: ...
	def isAlphaBlend(self) -> bool: ...
	def isOpaque(self) -> bool: ...
	def getCopy(self) -> Material: ...
	def updateSettings(self) -> None: ...
	def updateUniforms(self) -> None: ...

class UIStyle(Asset):
	nineSliceUse : bool = False
	nineSliceBorder : float = 32.0
	colorBase : Color
	colorHovered : Color
	colorPressed : Color
	onHoverIn : SourceCode
	onHoverOut : SourceCode
	onClickIn : SourceCode
	onClickOut : SourceCode

	def __init__(self): ...
	def __init__(self, other : UIStyle): ...

	def uIDoubleClicked(self) -> None: ...

class AnimationComponent(Component):
	armature : AssetHandler_Armature_
	defaultAnimation : AssetHandler_Animation_
	localBoundingBox : Transform
	armatureBlock : ArmatureUBO

	def __init__(self): ...
	def __init__(self, other : AnimationComponent): ...

	def start(self, s : Scene) -> None: ...
	def update(self) -> None: ...
	def editorUpdate(self) -> None: ...
	def end(self, s : Scene) -> None: ...
	def updateSockets(self) -> None: ...
	def getWorldBoundingBox(self) -> Transform: ...
	def playByName(self, anim : str, blend : float = 0.f, layer : int = 0, loop : bool = False, priority : int = 0) -> AnimationComponent.AnimationLayer: ...
	def play(self, anim : Animation, blend : float = 0.f, layer : int = 0, loop : bool = False, priority : int = 0) -> AnimationComponent.AnimationLayer: ...
	def getAnimation(self, layer : int = 0) -> AnimationComponent.AnimationLayer: ...
	def getAnimationName(self, layer : int = 0) -> str: ...
	def setLayerWeight(self, layer : int, value : float) -> None: ...
	def getLayerWeight(self, layer : int) -> float: ...
	def createLayerFilter(self, layer : int) -> AnimationFilter: ...
	def copyLayerFilter(self, filter : AnimationFilter, layer : int) -> AnimationFilter: ...
	def getLayerFilter(self, layer : int) -> AnimationFilter: ...
	def removeLayerFilter(self, layer : int) -> None: ...
	def stop(self, layer : int = 0) -> None: ...
	def isLayerBlending(self, layer : int = 0) -> bool: ...
	def getBlendingProgress(self, layer : int = 0) -> float: ...
	def getRootMotion(self) -> Vector3: ...
	def getRootMotionLayer(self, layer : int = 0) -> Vector3: ...
	def addPostEvaluationCallback(self, function: Callable) -> None: ...
	def clearPostEvaluationCallback(self) -> None: ...

class AnimationSocketComponent(Component):
	boneName : str
	position : CopyInfo
	rotation : CopyInfo
	scale : CopyInfo

	def __init__(self): ...
	def __init__(self, other : AnimationSocketComponent): ...

class CameraComponent(Component):
	fov : float
	start : float
	end : float
	lerpPosition : float = 1.0
	lerpRotation : float = 1.0
	lerpFov : float = 1.0
	useCamera : bool = True
	isPerspective : bool = True
	updateWhenPaused : bool = True
	flipX : bool = False
	flipY : bool = False

	def __init__(self): ...
	def __init__(self, other : CameraComponent): ...

	def start(self, s : Scene) -> None: ...
	def editorUpdate(self) -> None: ...
	def pausedUpdate(self) -> None: ...
	def end(self, s : Scene) -> None: ...
	def cameraUpdate(self) -> None: ...
	def updateCamera(self, cam : Camera, applyLerp : bool = True) -> None: ...
	def renderToTexture(self, textureName : str) -> None: ...

class DecalComponent(Component):
	transform : TransformComponent
	material : AssetHandler_Material_
	overlayMask : BitMask
	opacity : float
	layer : int
	angleFade : bool
	projectionMode : int

	def __init__(self): ...
	def __init__(self, other : DecalComponent): ...

	def start(self, s : Scene) -> None: ...
	def end(self, s : Scene) -> None: ...
	def use(self, s : ShaderProgram) -> None: ...
	def getMaterial(self, markAsDirty : bool = True) -> Material: ...
	def setMaterial(self, asset : Material) -> None: ...

class LightComponent(Component):
	color : Vector3
	radius : float
	intensity : float

	def __init__(self): ...
	def __init__(self, other : LightComponent): ...

	def start(self, s : Scene) -> None: ...
	def end(self, s : Scene) -> None: ...

class MeshComponent(Component):
	visible : bool = True
	proxyForShadowPass : MeshProxyComponent = None
	proxyForRegularPass : MeshProxyComponent = None
	tint : Vector4
	mesh : AssetHandler_Mesh_
	material : AssetHandler_Material_
	allowUniformOverrides : bool = False
	uniformOverrides : dict

	def __init__(self): ...
	def __init__(self, other : MeshComponent): ...

	def start(self, s : Scene) -> None: ...
	def end(self, s : Scene) -> None: ...
	def getCustomName(self) -> str: ...
	def getBoundingBox(self, keepAspect : bool = True) -> Transform: ...
	def isAlphaBlend(self) -> bool: ...
	def isOpaque(self) -> bool: ...
	def getFinalMaterial(self) -> Material: ...

class ParticleComponent(MeshComponent):
	optimization : Optimizations
	instanceSetting : ParticleInstanceDescriptor
	instanceLifeColors : CurveColors
	instanceSpawn : AssetHandler_Mesh_
	emmiterLifetime : SceneTimer

	def __init__(self): ...
	def __init__(self, other : ParticleComponent): ...

	def getCustomName(self) -> str: ...
	def start(self, s : Scene) -> None: ...
	def update(self) -> None: ...
	def editorUpdate(self) -> None: ...
	def end(self, s : Scene) -> None: ...
	def getParticleCount(self) -> int: ...
	def getTransforms(self) -> list_Transform_: ...
	def getTints(self) -> list_Vector4_: ...

class PythonCodeComponent(Component):
	optimization : Optimizations
	code : PyCodes
	properties : dict

	def __init__(self): ...
	def __init__(self, other : PythonCodeComponent): ...

	def start(self, s : Scene) -> None: ...
	def firstUpdate(self) -> None: ...
	def update(self) -> None: ...
	def pausedUpdate(self) -> None: ...
	def editorUpdate(self) -> None: ...
	def end(self, s : Scene) -> None: ...
	def compileScripts(self) -> None: ...

class TransformComponent(Component, NodeTransform):
	def __init__(self): ...
	def __init__(self, other : TransformComponent): ...

	def getParent(self) -> NodeTransform: ...

class ThirdPersonCamComponent(Component):
	mouselook : Mouselook
	alignPlayer : AlignPlayerRule = ON_MOVEMENT
	alignSmooth : float = 0.5
	headOffset : Vector3 = glm::vec3(0.f,1.f,0.f)
	cameraOffset : Transform
	camCollision : CamCollisionConfig

	def __init__(self): ...
	def __init__(self, other : ThirdPersonCamComponent): ...

	def start(self, scene : Scene) -> None: ...
	def update(self) -> None: ...
	def editorUpdate(self) -> None: ...
	def enableJoystick(self, id : int, tolerance : float = 0.1, sensitivity : Vector2 = glm::vec2(-0.1,0.1)) -> None: ...
	def disableJoystick(self) -> None: ...
	def isJoystickEnabled(self) -> bool: ...

class TopDownCamComponent(Component):
	playerName : str
	height : float = 2.0
	distance : float = 8.0
	onGroundOnly : bool = True
	forwardAdvance : float = 1.0

	def __init__(self): ...
	def __init__(self, other : TopDownCamComponent): ...

	def start(self, s : Scene) -> None: ...
	def lateUpdate(self) -> None: ...
	def editorUpdate(self) -> None: ...
	def getTargetPosition(self) -> Vector3: ...
	def getExpectedCamPositionFor(self, playerPos : Vector3) -> Vector3: ...

class MouselookComponent(Component):
	lockMousePos : bool
	xAxis : MouselookAxisConfig
	yAxis : MouselookAxisConfig

	def __init__(self): ...
	def __init__(self, other : MouselookComponent): ...

	def start(self, s : Scene) -> None: ...
	def update(self) -> None: ...

class FirstPersonCamComponent(MouselookComponent):
	def __init__(self): ...
	def __init__(self, other : FirstPersonCamComponent): ...

	def start(self, scene : Scene) -> None: ...

class PlayerComponent(Component):
	active : bool
	smoothTurn : float = 0.0
	smoothSpeed : float = 0.0
	walkSpeed : float
	runSpeed : float
	localMovement : bool
	jump : bool

	def __init__(self): ...
	def __init__(self, other : PlayerComponent): ...

	def start(self, s : Scene) -> None: ...
	def update(self) -> None: ...
	def isWalking(self) -> bool: ...
	def isRunning(self) -> bool: ...

class VehicleControllerComponent(Component):
	active : bool = True

	def __init__(self): ...
	def __init__(self, other : VehicleControllerComponent): ...

	def start(self, s : Scene) -> None: ...
	def update(self) -> None: ...

class UIElementComponent(Component):
	position : UIVector
	scale : UIVector
	layer : int = 0
	quad : QuadDesc
	font : FontDesc

	def __init__(self): ...
	def __init__(self, other : UIElementComponent): ...

	def start(self, s : Scene) -> None: ...
	def end(self, s : Scene) -> None: ...
	def getParent(self) -> UIElementComponent: ...
	def getChildren(self) -> list_UIElementComponent_: ...
	def getText(self) -> str: ...
	def setText(self, value : str) -> None: ...
	def isHovered(self) -> bool: ...
	def isPressed(self) -> bool: ...
	def getDrawFontScale(self) -> Vector2: ...
	def getDefaultQuadAlpha(self) -> float: ...
	def setDefaultQuadAlpha(self, value : float) -> None: ...
	def getDefaultQuadColor(self) -> Vector3: ...
	def setDefaultQuadColor(self, color : Vector3) -> None: ...
	def getDefaultQuadBlurBackground(self) -> float: ...
	def setDefaultQuadBlurBackground(self, value : float) -> None: ...

class CharacterComponent(Component):
	shape : ShapeDesc
	config : Config
	group : BitMask
	mask : BitMask

	def __init__(self): ...
	def __init__(self, other : CharacterComponent): ...

	def getVerticalVelocity(self) -> float: ...
	def setVerticalVelocity(self, val : float) -> None: ...
	def start(self, scene : Scene) -> None: ...
	def update(self) -> None: ...
	def editorUpdate(self) -> None: ...
	def end(self, scene : Scene) -> None: ...
	def getCollisions(self) -> list_CollisionInfo_: ...
	def getCollisionsWith(self, tag : str) -> list_CollisionInfo_: ...
	def collidedWith(self, tag : str) -> bool: ...
	def getTransformFromBullet(self) -> None: ...
	def sendTransformToBullet(self) -> None: ...
	def getFallSpeed(self) -> float: ...
	def setFallSpeed(self, value : float) -> None: ...
	def getCurrentFallSpeed(self) -> float: ...
	def getGravity(self) -> float: ...
	def setGravity(self, value : float) -> None: ...
	def getJumpSpeed(self) -> float: ...
	def setJumpSpeed(self, value : float) -> None: ...
	def getMaxSlope(self) -> float: ...
	def setMaxSlope(self, value : float) -> None: ...
	def jump(self) -> None: ...
	def setWalkDirection(self, x : float, y : float, z : float, local : bool = True) -> None: ...
	def setWalkDirection(self, dir : Vector3, local : bool = True) -> None: ...
	def getWalkDirection(self, ignoreDeltaTime : bool = False) -> Vector3: ...
	def getMoveSpeed(self, ignoreDeltaTime : bool = False) -> float: ...
	def isMoving(self) -> bool: ...
	def isFalling(self) -> bool: ...
	def onGround(self) -> bool: ...
	def reset(self) -> None: ...
	def isEnabled(self) -> bool: ...
	def enable(self) -> None: ...
	def disable(self) -> None: ...
	def setEnabled(self, value : bool) -> None: ...
	def getEnabled(self) -> bool: ...
	def getBulletCollisionObject(self) -> btCollisionObject: ...

class PhysicsConstraintComponent(Component):
	def __init__(self): ...
	def __init__(self, other : PhysicsConstraintComponent): ...

	def start(self, s : Scene) -> None: ...
	def update(self) -> None: ...
	def editorUpdate(self) -> None: ...
	def end(self, s : Scene) -> None: ...
	def setType(self, type : PhysicsConstraintType) -> None: ...

class RigidBodyComponent(Component):
	mesh : AssetHandler_Mesh_
	alwaysActive : bool
	enableDistanceCulling : bool = False
	cullDistance : float = 200.0
	group : BitMask
	mask : BitMask

	def __init__(self): ...
	def __init__(self, other : RigidBodyComponent): ...

	def start(self, s : Scene) -> None: ...
	def update(self) -> None: ...
	def end(self, s : Scene) -> None: ...
	def getCollisions(self) -> list_CollisionInfo_: ...
	def getCollisionsWith(self, tag : str) -> list_CollisionInfo_: ...
	def collidedWith(self, tag : str) -> bool: ...
	def getCustomName(self) -> str: ...
	def getTransformFromBullet(self) -> None: ...
	def sendTransformToBullet(self) -> None: ...
	def applyTorque(self, x : float, y : float, z : float) -> None: ...
	def applyForce(self, x : float, y : float, z : float, location : Vector3) -> None: ...
	def applyImpulse(self, x : float, y : float, z : float, location : Vector3) -> None: ...
	def setLinearVelocity(self, x : float, y : float, z : float) -> None: ...
	def getLinearVelocity(self) -> Vector3: ...
	def setAngularVelocity(self, x : float, y : float, z : float) -> None: ...
	def getAngularVelocity(self) -> Vector3: ...
	def setMass(self, mass : float) -> None: ...
	def setAngularFactor(self, value : Vector3) -> None: ...
	def setAngularFactor(self, x : float, y : float, z : float) -> None: ...
	def getAngularFactor(self) -> Vector3: ...
	def setShapeType(self, shape : RigidBodyShape) -> None: ...
	def getShapeType(self) -> RigidBodyShape: ...
	def getShapeType(self) -> RigidBodyShape: ...
	def getRigidBody(self) -> btRigidBody: ...
	def isDynamic(self) -> bool: ...
	def isBoxCollider(self) -> bool: ...
	def getBoxOffset(self) -> Vector3: ...
	def getBoxScale(self) -> Vector3: ...
	def isGhost(self) -> bool: ...
	def getGhost(self) -> bool: ...
	def setGhost(self, value : bool) -> None: ...
	def getTriangleMeshTriangleCount(self) -> int: ...

class VehicleComponent(Component):
	engineForce : Engine
	steering : Steering

	def __init__(self): ...
	def __init__(self, other : VehicleComponent): ...

	def start(self, scene : Scene) -> None: ...
	def update(self) -> None: ...
	def end(self, scene : Scene) -> None: ...
	def accelerate(self, scale : float = 1.0) -> None: ...
	def reverse(self, scale : float = 1.0) -> None: ...
	def brake(self, scale : float = 1.0) -> None: ...
	def brakeRelease(self) -> None: ...
	def idle(self) -> None: ...
	def applyForce(self, force : float) -> None: ...
	def turnLeft(self) -> None: ...
	def turnRight(self) -> None: ...
	def turnStraight(self) -> None: ...

class WheelComponent(Component):
	tuning : TuningConfig
	control : Controls
	dirAxis : int = 4
	axleAxis : int = 3
	suspensionRestLength : float = 1.0
	radius : float = 0.5
	isFrontWheel : bool = False

	def __init__(self): ...
	def __init__(self, other : WheelComponent): ...

	def start(self, s : Scene) -> None: ...
	def editorUpdate(self) -> None: ...
	def getDirection(self) -> Vector3: ...
	def getAxle(self) -> Vector3: ...
	def getTuningConfig(self) -> btRaycastVehicle.btVehicleTuning: ...

class CollisionInfo():
	position : Vector3
	normal : Vector3
	entity : Entity = None

class RayCastOut():
	hit : bool
	position : Vector3
	normal : Vector3
	entity : Entity

	def __init__(self): ...

class SphereCastOut(RayCastOut):
	penetration : float
	recoveryPosition : Vector3

	def __init__(self): ...

class Window():
	def setTitle(self, title : str) -> None: ...
	def getTitle(self) -> str: ...
	def getAspect(self) -> float: ...
	def getWindowPosition(self) -> Vector2: ...
	def getWindowSize(self) -> Vector2: ...
	def setMousePosition(self, x : int, y : int) -> None: ...
	def setMousePositionX(self, value : int) -> None: ...
	def setMousePositionY(self, value : int) -> None: ...
	def getMousePosition(self, normalize : bool = False) -> Vector2: ...
	def setFullscreen(self, value : bool) -> None: ...
	def toggleFullscreen(self) -> None: ...
	def isFullscreen(self) -> bool: ...
	def isMaximized(self) -> bool: ...
	def isMinimized(self) -> bool: ...
	def hasInputFocus(self) -> bool: ...
	def hasMouseFocus(self) -> bool: ...
	def isShown(self) -> bool: ...
	def isHidden(self) -> bool: ...
	def minimize(self) -> None: ...
	def maximize(self) -> None: ...
	def restore(self) -> None: ...
	def hide(self) -> None: ...
	def show(self) -> None: ...

class Timer():
	def __init__(self): ...
	def __init__(self, start : float): ...

	def get(self) -> float: ...
	def set(self, value : float) -> None: ...
	def reset(self) -> None: ...

class SceneTimer(Timer):
	def __init__(self): ...
	def __init__(self, start : float): ...



